# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#TEST
POST /testPost	controllers.Application.testPost(hostName: String)

# Home page
GET     /                           controllers.Application.index()
GET		/host/list					controllers.Application.getHostList()
#host summary
GET  /host/info		controllers.Application.hostInfo(hostName : String)

#VM operations
GET     /vm/list/configuration    	controllers.Application.getStaticList(hostName : String, filter : Int )
#param hostName ---all >list all   --other-> host specific list
GET     /vm/list/runtime      controllers.Application.getDynamicList(hostName : String)

#createintg vm
POST  /vm/create			controllers.Application.createVM(hostName : String)
POST  /vm/create/validate			controllers.Application.validateVMName(hostName : String,vmName: String)
#start vm
PUT  /vm/start		controllers.VMOperation.start(vmName : String, hostName : String)
#send shutdown signal to vm
PUT  /vm/shutdown		controllers.VMOperation.shutdown(vmName : String, hostName : String)
#reboot host
PUT  /vm/reboot		controllers.VMOperation.reboot(vmName : String, hostName : String)
#pause vm
PUT  /vm/suspend		controllers.VMOperation.suspend(vmName : String, hostName : String)
#resume vm
PUT  /vm/resume		controllers.VMOperation.resume(vmName : String, hostName : String)
#power off signal
PUT  /vm/poweroff		controllers.VMOperation.destroy(vmName : String, hostName : String)
#delete signal
DELETE  /vm/delete		controllers.VMOperation.delete(vmName : String, hostName : String)
#attach device
POST  /vm/addDisk		controllers.VMOperation.attachStorage(hostName : String, vmName : String,poolName : String,volName : String)

#vm snapshots
GET  /vm/snapshot/list		controllers.VMOperation.snapshotList(vmName : String, hostName : String)
POST  /vm/snapshot/create		controllers.VMOperation.snapshot(vmName : String, hostName : String)
PUT  /vm/snapshot/revert		controllers.VMOperation.revert(vmName : String, hostName : String , snapshotName : String)
DELETE  /vm/snapshot/delete		controllers.VMOperation.snapshotDelete(vmName : String, hostName : String , snapshotName : String)

#storage

GET /storage/pool/list		controllers.Storage.listStoragePool(hostName : String, filter: Int)
GET /storage/vol/list			controllers.Storage.listStorageVol(hostName : String, poolName : String)
POST /storage/pool/create		controllers.Storage.createStoragePool(hostName : String)
DELETE /storage/pool/delete		controllers.Storage.deleteStoragePool(hostName : String, poolName : String )
POST /storage/vol/create		controllers.Storage.createStorageVol(hostName : String, poolName : String)
DELETE /storage/vol/delete		controllers.Storage.deleteStorageVol(hostName : String, poolName : String, volName : String )

#start network
GET	 /network/start		controllers.Network.startNW(netName: String, hostName : String)
#stop network
GET	 /network/stop		controllers.Network.stopNW(netName : String, hostName : String)
#delete network
GET	 /network/delete		controllers.Network.deleteNW(netName : String, hostName : String)
GET	 /network			controllers.Network.listNW()
POST	 /network/create		controllers.Network.createNW()


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
